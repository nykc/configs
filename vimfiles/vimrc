" ============================================================================
" VIM CONFIGURATION FILE
"
" Version: 8.0.01 | 2019-08-01
" Author: Derek Ackley
" Gitlab: https://gitlab.com/nykc/configs/raw/master/vimfiles/vimrc
" File Location: ~/.vimrc
" ============================================================================

" ============================================================================
" General Settings
" ============================================================================
set nocompatible
set background=dark

set nobackup                " do not make backups
set noswapfile              " no swapfile

if !exists("g:syntax_on")
    syntax enable
endif

set termguicolors               " set terminal gui colors
colorscheme solarized8           " set the colorscheme

filetype plugin indent on       " enable filetype/indent/plugins

set autoread                " automatically re-read files if unmodified
set encoding=utf-8          " character encoding
set spelllang=en_us         " set default dictionary
set backspace=indent,eol,start
set clipboard=unnamed
set cursorcolumn            " highlights the current column
set cursorline              " highlights the current line
set fileformats=unix,mac
set history=1000            " set bigger history of executed commands
set lazyredraw              " redraw only when needed
set mouse=a                 " use mouse everywhere
set noerrorbells            " don't make a noise
set number                  " show line numbers by default
set ruler                   " show current position along the bottom
set scrolloff=999           " keep the cursor vertically centered
set showcmd                 " display mode (INSERT/REPLACE/etc.)
set title                   " display name of file being edited

" searching ----------------------------------------------------------------
set hlsearch            " highlight search results
set ignorecase          " case insensitive searching by default
set incsearch           " show search matches while typing
set smartcase           " case insensitive if using capital letter
set wrapscan            " wrap around file when searching

" text formatting & layout settings ----------------------------------------
set autoindent          " always set autoindenting on
set copyindent          " copy the previous indentation on autoindenting
set nocindent           " turn off c indenting
set nowrap              " turn off line wrapping
set showmatch           " show matching bracket [{(<>)}]
set smartindent         " extra level of indentation in some cases
set smarttab            " insert tabs start of line according to shiftwidth
set spellsuggest=5      " limit spell suggest to top 5 words

" wildmenu -----------------------------------------------------------------
set wildmenu            " make tab completion for file buffers act like bash
set wildmode=list:longest:full
set wildignorecase
set wildignore=*.dll,*.o*.obj,*.bak,*.exe,*.pyc,\*.jpg,*.gif,*.png


" ============================================================================
" Autocommands & Indentation
" ============================================================================
set expandtab
set modelines=1
set shiftwidth=4
set softtabstop=4   " 4 space tab
set tabstop=4       " 4 space tab default

filetype indent on
filetype plugin on

" only do this part when compiled with support for autocommands
if has("autocmd")
    filetype on

" customizations based on house style ---------------------------------------
    autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType scss setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType php setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
endif

" custom status line colors -------------------------------------------------

hi User1 ctermfg=007 ctermbg=239
hi User2 ctermfg=007 ctermbg=236
hi User3 ctermfg=236 ctermbg=236
hi User4 ctermfg=239 ctermbg=239


" ============================================================================
" Status Line
" ============================================================================
set laststatus=2                                     " enable the statusline

set statusline=
set statusline+=%0*\ %n\                             " buffer number
set statusline+=%1*\ %t%m%r%h%w\                     " shortname + flags
"set statusline+=%1*\ %<%F%m%r%h%w\                  " filename, modified, readonly, helpfile, preview
set statusline+="%3*%m"                              " modified flag
set statusline+=%3*│                                 " separator
set statusline+=%2*\ %Y\                             " fileType
set statusline+=%3*│                                 " separator
set statusline+=%2*\ %{GitBranch()}\                 " current git branch
set statusline+=%3*│                                 " separator
set statusline+=%2*\ %{''.(&fenc!=''?&fenc:&enc).''} " encoding
set statusline+=\ (%{&ff})                           " file format (dos/unix..)
set statusline+=\                                    " blank space
set statusline+=%=                                   " right Side
set statusline+=WC:%{WordCount()}\                   " word count
set statusline+=%3*│                                 " separator
set statusline+=%2*\ COL:\ %02v\                     " column number
set statusline+=%3*│                                 " separator
set statusline+=%1*\ LN:\ %02l/%L\ (%2p%%)\          " line no. / tot lines, percent


" ============================================================================
" Custom Filetype Settings
" ============================================================================
autocmd! BufNewFile * silent! or ~/.vim/templates/%:e.tpl

" create a file in ftplugin/filetype.vim for specific settings
au BufRead,BufNewFile,BufReadPost *.text,*.txt set filetype=text
au BufRead,BufNewFile,BufReadPost *.md set filetype=markdown
au BufRead,BufNewFile,BufReadPost *.jade set filetype=pug
au BufRead,BufNewFile,BufReadPost *.pug set filetype=pug
au BufRead,BufNewFile,BufReadPost *.coffee set filetype=coffee


" ============================================================================
" Custom Key Mappings
" ============================================================================
let mapleader=","

nmap <leader>dos :%s/\r//g
nmap <leader>l :set list!<cr>
nmap <leader>md :%! /usr/local/bin/markdown/ --html4tags <cr>
nmap <leader>mds :%! /usr/local/bin/markdown/ --html4tags <cr>:saveas %:r.html<cr>
nmap <leader>rw :%s/\s\+$//e
nmap <leader>ww :set wrap!<cr>

" enable copy/paste functionality
vmap <C-c> "+yi
vmap <C-x> #+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" quickly edit/reload the vimrc file
nmap <silent><leader>ev :vsplit $MYVIMRC<cr>
nmap <silent><leader>sv :so $MYVIMRC<cr>

" highlighting --------------------------------------------------------------
set list listchars=trail:_
set listchars=tab:·\ ,trail:·,extends:»,precedes:«
":highlight SpecialKey ctermfg=darkgrey ctermbg=yellow

" don't show tabs in html,xml -----------------------------------------------
autocmd filetype html,xml set listchars-=tab:>.

" remove bracket highlighting -----------------------------------------------
let g:loaded_matchparen = 1


" ===========================================================================
" Vim-diff configs
" ============================================================================
if &diff
    colorscheme elflord
    set diffopt+=iwhite
endif


" ============================================================================
" Functions
" ============================================================================
function! WordCount()
    let s:old_status = v:statusmsg
    let position = getpos(".")
    exe ":silent normal g\<c-g>"
    let stat = v:statusmsg
    let s:word_count = 0
    if stat != '--No lines in buffer--'
      let s:word_count = str2nr(split(v:statusmsg)[11])
      let v:statusmsg = s:old_status
    end
    call setpos('.', position)
    return s:word_count
endfunction

" Fetch the git branch of the current file, if applicable
function! GitBranch() abort
    let l:branchname = system("git rev-parse --abbrev-ref HEAD 2>/dev/null
        \ | tr -d '\n'")
    return strlen(l:branchname) > 0 ? '#'.l:branchname : ''
endfunction


" ============================================================================
" Plugin Settings
" ============================================================================

" Emmet settings ------------------------------------------------------------
let g:user_emmet_leader_key=','     " ,, will trigger emmet

" ============================================================================
" Vim Plug Setup & Configs
" ============================================================================
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'editorconfig/editorconfig-vim'
Plug 'lifepillar/vim-solarized8'
Plug 'mattn/emmet-vim'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'


" experimental Plugins -------------------------------------------------------


" all of your plugins must be added before the following line
call plug#end()

" brief help
" :PlugList             - list configured bundles
" :PlugInstall(!)       - install(update) bundles
" :PlugSearch(!) foo    - search(or refresh cache first) for foo
" :PlugClean(!)         - confirm(or auto-approve) removal of unused bundles
"
" NOTE: comments after Plug command not allowed..
